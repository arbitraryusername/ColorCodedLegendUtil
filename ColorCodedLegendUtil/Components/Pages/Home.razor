<!-- ColorCodedLegendUtil/Components/Pages/Home.razor -->
@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS

@rendermode InteractiveServer
@using System.Net.Http.Json

<div class="px-4">
    <h5>
        Choose an image, then click on a colored area on the image. A marker will be placed on the image, and an arrow will point to the corresponding region in the legend.
    </h5>

    <select @bind="SelectedImage">
        <option disabled selected value="">-- Your Images --</option>
        @foreach (var name in ImageNames)
        {
            <option value="@name">@name</option>
        }
    </select>
</div>

@if (!string.IsNullOrEmpty(SelectedImage))
{
    <div style="display: inline-block; width: 100vw; position: relative;">
        <!-- Base image -->
        <img src="@ImageSrc"
             @onclick="OnImageClick"
             style="max-width: 100%; height: auto;"
             @ref="BaseImageRef" />

        <!-- SVG overlay (if we have one) -->
        @if (!string.IsNullOrEmpty(SvgOverlaySrc))
        {
            <img src="@SvgOverlaySrc"
                 @onclick="OnImageClick"
                 style="position: absolute; left: 0; top: 0; max-width: 100%; height: auto;" />
        }
    </div>
}

@code {
    private List<string> ImageNames = new();

    private string? ImageSrc;
    private string? SvgOverlaySrc;

    private string? selectedImage;
    private string? SelectedImage
    {
        get => selectedImage;
        set
        {
            if (selectedImage != value)
            {
                selectedImage = value;
                if (!string.IsNullOrEmpty(selectedImage))
                {
                    ImageSrc = $"/api/images/{selectedImage}";
                    SvgOverlaySrc = null;
                }
            }
        }
    }

    private ElementReference BaseImageRef;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ServerAPI");
        var names = await client.GetFromJsonAsync<List<string>>("api/images");
        if (names is not null)
        {
            ImageNames = names;
        }
    }

    private async Task OnImageClick(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(SelectedImage))
            return;

        try
        {
            // Get the bounding rectangle and natural size of the image
            ImageDetails? details = await JS.InvokeAsync<ImageDetails>(
                "getElementDetails", BaseImageRef);

            if (details == null)
            {
                // Handle the case where details could not be retrieved
                Console.Error.WriteLine("Could not retrieve image details.");
                return;
            }

            // Calculate scaling factors
            double scaleX = details.NaturalWidth / details.BoundingRect.Width;
            double scaleY = details.NaturalHeight / details.BoundingRect.Height;

            // Calculate the click position relative to the image
            double relativeX = e.ClientX - details.BoundingRect.Left;
            double relativeY = e.ClientY - details.BoundingRect.Top;

            // Adjust for scaling
            double adjustedX = relativeX * scaleX;
            double adjustedY = relativeY * scaleY;

            // Ensure coordinates are within the natural dimensions
            adjustedX = Math.Clamp(adjustedX, 0, details.NaturalWidth);
            adjustedY = Math.Clamp(adjustedY, 0, details.NaturalHeight);

            var coords = new { X = (int)adjustedX, Y = (int)adjustedY };

            var clientApi = HttpClientFactory.CreateClient("ServerAPI");
            var response = await clientApi.PostAsJsonAsync($"api/images/{SelectedImage}/click", coords);

            if (response.IsSuccessStatusCode)
            {
                var svgBytes = await response.Content.ReadAsByteArrayAsync();
                var base64Svg = Convert.ToBase64String(svgBytes);
                SvgOverlaySrc = $"data:image/svg+xml;base64,{base64Svg}";
            }
            else
            {
                // Handle error if needed
                SvgOverlaySrc = null;
                Console.Error.WriteLine($"Failed to post click coordinates: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions as needed
            SvgOverlaySrc = null;
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    // C# class to represent the image details returned from JavaScript
    public class ImageDetails
    {
        public BoundingClientRect BoundingRect { get; set; }
        public int NaturalWidth { get; set; }
        public int NaturalHeight { get; set; }
    }

    // C# class to represent the bounding rectangle
    public class BoundingClientRect
    {
        public double Top { get; set; }
        public double Left { get; set; }
        public double Bottom { get; set; }
        public double Right { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }
}
